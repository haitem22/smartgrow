{"ast":null,"code":"var _jsxFileName = \"D:\\\\programing\\\\New folder (2)\\\\systeme-irrigation\\\\src\\\\components\\\\pages\\\\DashboardHome.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, BarChart, Bar, ResponsiveContainer } from 'recharts';\nimport io from 'socket.io-client';\nimport './DashboardHome.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StatCard = ({\n  title,\n  value,\n  icon,\n  status = 'normal'\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `stat-card ${status}`,\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"stat-icon\",\n    children: icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n_c = StatCard;\nconst DashboardHome = () => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [currentStats, setCurrentStats] = useState({\n    humidity: 0,\n    temperature: 0,\n    waterUsed: 0\n  });\n\n  // Nouveaux états pour l'irrigation\n  const [irrigationState, setIrrigationState] = useState('Arrêté');\n  const [irrigationDuration, setIrrigationDuration] = useState(0);\n  const [irrigationQueue, setIrrigationQueue] = useState([]);\n  const [currentIrrigationTimer, setCurrentIrrigationTimer] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n\n  // Fonction pour démarrer une irrigation\n  const startIrrigation = duration => {\n    console.log(\"🚿 Démarrage irrigation pour ${duration} secondes\");\n    setIrrigationState('En cours');\n    setIrrigationDuration(duration);\n\n    // Timer pour compter la durée restante\n    const timer = setInterval(() => {\n      setIrrigationDuration(prev => {\n        if (prev <= 1) {\n          // Irrigation terminée\n          finishIrrigation();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    setCurrentIrrigationTimer(timer);\n  };\n\n  // Fonction pour terminer une irrigation\n  const finishIrrigation = () => {\n    console.log('✅ Irrigation terminée');\n    setIrrigationState('Arrêté');\n    setIrrigationDuration(0);\n    if (currentIrrigationTimer) {\n      clearInterval(currentIrrigationTimer);\n      setCurrentIrrigationTimer(null);\n    }\n\n    // Traiter le prochain ordre dans la file d'attente (kas thahed wa9ila)\n    setIrrigationQueue(prev => {\n      const newQueue = [...prev];\n      const nextOrder = newQueue.shift();\n      if (nextOrder) {\n        console.log(\"📋 Traitement de l'ordre suivant: ${nextOrder} secondes\");\n        setTimeout(() => startIrrigation(nextOrder), 500); // Petit délai avant le prochain\n      }\n      return newQueue;\n    });\n  };\n\n  // Fonction pour ajouter un ordre d'irrigation (durée en heures)\n  const addIrrigationOrder = durationInHours => {\n    // Convertir les heures en secondes\n    const durationInSeconds = Math.floor(durationInHours * 3600);\n    if (irrigationState === 'Arrêté') {\n      // Aucune irrigation en cours, démarrer immédiatement\n      startIrrigation(durationInSeconds);\n    } else {\n      // Irrigation en cours, ajouter à la file d'attente (kas thahed wa9ila)\n      console.log(\"📝 Ordre d'irrigation ajouté à la file d'attente: ${durationInHours}h (${durationInSeconds}s)\");\n      setIrrigationQueue(prev => [...prev, durationInSeconds]);\n    }\n  };\n\n  // Initialize Socket.IO connection\n  useEffect(() => {\n    const socket = io('http://localhost:3000', {\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n\n    // Handle Socket.IO connection\n    socket.on('connect', () => {\n      console.log('✅ Connected to Socket.IO server');\n      setConnectionStatus('connected');\n      setError(null);\n      setIsLoading(false);\n    });\n\n    // Handle sensor data from server\n    socket.on('sensorData', sensorData => {\n      console.log('Data received from server:', sensorData);\n      if (sensorData && typeof sensorData === 'object') {\n        // Update current stats\n        setCurrentStats({\n          moisture: sensorData.h_soil_pourcentage != null ? sensorData.h_soil_pourcentage : \"--\",\n          // Match MQTT data field 'h' for humidity\n          humidity: sensorData.h_air != null ? sensorData.h_air : \"--\",\n          temperature: sensorData.t != null ? sensorData.t : \"--\",\n          waterUsed: Math.floor(Math.random() * 300) // Placeholder until real data available\n        });\n\n        // Vérifier s'il y a un ordre d'irrigation dans les données (????XXX)\n        if (sensorData.prediction && sensorData.time) {\n          console.log(\"🚿 Ordre d'irrigation reçu: ${sensorData.irrigation_duration}h\");\n          addIrrigationOrder(sensorData.irrigation_duration); // Durée en heures\n        }\n\n        // Create chart data point\n        const now = new Date();\n        const timeString = now.toLocaleTimeString().slice(0, 5);\n        const newDataPoint = {\n          time: timeString,\n          humidity: sensorData.h_air != null ? sensorData.h_air : 0,\n          // Use h_air for chart\n          temperature: sensorData.t != null ? sensorData.t : 0,\n          water: sensorData.waterUsed != null ? sensorData.waterUsed : Math.floor(Math.random() * 300),\n          timestamp: sensorData.ts ? new Date(sensorData.ts * 1000).toISOString() : now.toISOString()\n        };\n\n        // Add to chart data (keep last 10 points)\n        setChartData(prevData => {\n          const updatedData = [...prevData, newDataPoint];\n          return updatedData.slice(-10); // Keep only last 10 points\n        });\n        console.log('✅ Data updated successfully');\n      } else {\n        console.log('⚠️ Invalid data received from server');\n        setError('Invalid data received from server');\n      }\n    });\n\n    // Handle connection errors\n    socket.on('connect_error', error => {\n      console.error('❌ Socket.IO connection error:', error);\n      setConnectionStatus('disconnected');\n      setError('Failed to connect to server');\n      setIsLoading(false);\n\n      // Use fallback data if no real data available\n      if (chartData.length === 0) {\n        const fallbackData = createFallbackData();\n        setChartData(fallbackData);\n        setCurrentStats({\n          humidity: \"--\",\n          temperature: \"--\",\n          waterUsed: \"--\"\n        });\n      }\n    });\n\n    // Handle disconnection\n    socket.on('disconnect', () => {\n      console.log('🔌 Disconnected from Socket.IO server');\n      setConnectionStatus('disconnected');\n      setError('Server disconnected');\n    });\n\n    // Initial load: check if server is running\n    const loadInitialData = async () => {\n      setIsLoading(true);\n      if (!socket.connected) {\n        console.log('⚠️ Server not running, using fallback data');\n        setError('Server not running (Start: node server.js)');\n        const fallbackData = createFallbackData();\n        setChartData(fallbackData);\n        setCurrentStats({\n          humidity: \"--\",\n          temperature: \"--\",\n          waterUsed: \"--\"\n        });\n        setIsLoading(false);\n      }\n    };\n    loadInitialData();\n\n    // Cleanup on unmount\n    return () => {\n      socket.disconnect();\n      console.log('🧹 Socket.IO connection closed');\n    };\n  }, []);\n\n  // Nettoyage du timer lors du démontage du composant\n  useEffect(() => {\n    return () => {\n      if (currentIrrigationTimer) {\n        clearInterval(currentIrrigationTimer);\n      }\n    };\n  }, [currentIrrigationTimer]);\n\n  // Fallback data when server is not available\n  const createFallbackData = () => {\n    const data = [];\n    const now = new Date();\n    for (let i = 9; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 300000);\n      data.push({\n        time: time.toLocaleTimeString().slice(0, 5),\n        humidity: Math.floor(30 + Math.random() * 50),\n        temperature: Math.floor(15 + Math.random() * 15),\n        water: Math.floor(Math.random() * 300),\n        timestamp: time.toISOString()\n      });\n    }\n    return data;\n  };\n\n  // Get status colors for stat cards\n  const getmoisureStatus = () => {\n    if (typeof currentStats.moisture === 'number') {\n      if (currentStats.moisture < 20) return 'danger';\n      if (currentStats.moisture < 30) return 'warning';\n      return 'normal';\n    }\n    return 'normal';\n  };\n\n  // Get status colors for stat cards\n  const getHumidityStatus = () => {\n    if (typeof currentStats.humidity === 'number') {\n      if (currentStats.humidity < 20) return 'danger';\n      if (currentStats.humidity < 30) return 'warning';\n      return 'normal';\n    }\n    return 'normal';\n  };\n  const getTemperatureStatus = () => {\n    if (typeof currentStats.temperature === 'number') {\n      if (currentStats.temperature > 35) return 'warning';\n      if (currentStats.temperature > 40) return 'danger';\n      return 'normal';\n    }\n    return 'normal';\n  };\n  const getIrrigationStatus = () => {\n    return irrigationState === 'En cours' ? 'warning' : 'normal';\n  };\n  const getDurationStatus = () => {\n    return irrigationDuration > 0 ? 'warning' : 'normal';\n  };\n\n  // Formatage de la durée (secondes vers heures:minutes:secondes)\n  const formatDuration = seconds => {\n    if (seconds === 0) return '0s';\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = seconds % 60;\n    let result = [];\n    if (hours > 0) {\n      result.push({\n        hours\n      });\n    }\n    if (minutes > 0) {\n      result.push({\n        minutes\n      });\n    }\n    if (remainingSeconds > 0 || result.length === 0) {\n      result.push({\n        remainingSeconds\n      });\n    }\n    return result.join(' ');\n  };\n\n  // Show loading \n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      style: {\n        padding: '50px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: \"\\u23F3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Chargement des donn\\xE9es du serveur...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"dashboard-home\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Syst\\xE8me d'Irrigation Intelligent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `connection-status ${connectionStatus}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-dot\",\n          children: connectionStatus === 'connected' ? '🟢' : '🔴'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-text\",\n          children: connectionStatus === 'connected' ? 'Serveur connecté' : 'Serveur déconnecté'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-banner\",\n      style: {\n        background: '#ffebee',\n        color: '#c62828',\n        padding: '10px',\n        borderRadius: '5px',\n        margin: '10px 0',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u26A0\\uFE0F \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        className: \"retry-button\",\n        style: {\n          background: '#c62828',\n          color: 'white',\n          border: 'none',\n          padding: '5px 10px',\n          borderRadius: '3px',\n          cursor: 'pointer'\n        },\n        children: \"R\\xE9essayer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"stats-section\",\n      style: {\n        display: 'grid',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\n        gap: '20px',\n        margin: '20px 0'\n      },\n      children: [/*#__PURE__*/_jsxDEV(StatCard, {\n        title: \"Humidit\\xE9 du sol\",\n        value: `${currentStats.moisure}%`,\n        icon: \"\\uD83D\\uDCA7\",\n        status: getmoisureStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatCard, {\n        title: \"Temp\\xE9rature\",\n        value: `${currentStats.temperature}°C`,\n        icon: \"\\uD83C\\uDF21\\uFE0F\",\n        status: getTemperatureStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatCard, {\n        title: \"Humidit\\xE9 de l'air\",\n        value: `${currentStats.humidity}%`,\n        icon: \"\\uD83D\\uDCA7\",\n        status: getHumidityStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatCard, {\n        title: \"Niveau d'Irrigation\",\n        value: typeof currentStats.moisture === 'number' && currentStats.moisture < 30 ? 'Faible' : 'Élevé',\n        icon: \"\\uD83C\\uDF31\",\n        status: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatCard, {\n        title: \"\\xC9tat d'irrigation\",\n        value: irrigationState,\n        icon: \"\\uD83D\\uDEBF\",\n        status: getIrrigationStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StatCard, {\n        title: \"Dur\\xE9e d'irrigation\",\n        value: formatDuration(irrigationDuration),\n        icon: \"\\u23F1\",\n        status: getDurationStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), irrigationQueue.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"irrigation-queue\",\n      style: {\n        background: '#fff3cd',\n        color: '#856404',\n        padding: '10px',\n        borderRadius: '5px',\n        margin: '10px 0',\n        border: '1px solid #ffeaa7'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\uD83D\\uDCCB File d'attente d'irrigation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this), \" \", irrigationQueue.length, \" ordre(s) en attente\", /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '0.9em',\n          marginTop: '5px'\n        },\n        children: [\"Prochains: \", irrigationQueue.slice(0, 3).map(durationInSeconds => formatDuration(durationInSeconds)).join(', '), irrigationQueue.length > 3 && '...']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 9\n    }, this), chartData.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"chart-section\",\n        style: {\n          margin: '30px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\xC9volution de l'humidit\\xE9 et temp\\xE9rature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          style: {\n            height: '300px',\n            margin: '20px 0'\n          },\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: 300,\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: chartData,\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                stroke: \"#eee\",\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                yAxisId: \"left\",\n                orientation: \"left\",\n                stroke: \"#1a562f\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 420,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                yAxisId: \"right\",\n                orientation: \"right\",\n                stroke: \"#8884d8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                yAxisId: \"left\",\n                type: \"monotone\",\n                dataKey: \"humidity\",\n                stroke: \"#1a562f\",\n                strokeWidth: 2,\n                name: \"Humidit\\xE9 (%)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                yAxisId: \"right\",\n                type: \"monotone\",\n                dataKey: \"temperature\",\n                stroke: \"#8884d8\",\n                strokeWidth: 2,\n                name: \"Temp\\xE9rature (\\xB0C)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardHome, \"otuqS+lzKB2rgCv1NHEanK65flI=\");\n_c2 = DashboardHome;\nexport default DashboardHome;\nvar _c, _c2;\n$RefreshReg$(_c, \"StatCard\");\n$RefreshReg$(_c2, \"DashboardHome\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","BarChart","Bar","ResponsiveContainer","io","jsxDEV","_jsxDEV","Fragment","_Fragment","StatCard","title","value","icon","status","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","DashboardHome","_s","chartData","setChartData","currentStats","setCurrentStats","humidity","temperature","waterUsed","irrigationState","setIrrigationState","irrigationDuration","setIrrigationDuration","irrigationQueue","setIrrigationQueue","currentIrrigationTimer","setCurrentIrrigationTimer","isLoading","setIsLoading","error","setError","connectionStatus","setConnectionStatus","startIrrigation","duration","console","log","timer","setInterval","prev","finishIrrigation","clearInterval","newQueue","nextOrder","shift","setTimeout","addIrrigationOrder","durationInHours","durationInSeconds","Math","floor","socket","reconnection","reconnectionAttempts","reconnectionDelay","on","sensorData","moisture","h_soil_pourcentage","h_air","t","random","prediction","time","irrigation_duration","now","Date","timeString","toLocaleTimeString","slice","newDataPoint","water","timestamp","ts","toISOString","prevData","updatedData","length","fallbackData","createFallbackData","loadInitialData","connected","disconnect","data","i","getTime","push","getmoisureStatus","getHumidityStatus","getTemperatureStatus","getIrrigationStatus","getDurationStatus","formatDuration","seconds","hours","minutes","remainingSeconds","result","join","style","padding","textAlign","background","color","borderRadius","margin","display","justifyContent","alignItems","onClick","window","location","reload","border","cursor","gridTemplateColumns","gap","moisure","fontSize","marginTop","map","height","width","stroke","strokeDasharray","dataKey","yAxisId","orientation","type","strokeWidth","name","_c2","$RefreshReg$"],"sources":["D:/programing/New folder (2)/systeme-irrigation/src/components/pages/DashboardHome.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, BarChart, Bar, ResponsiveContainer } from 'recharts';\r\nimport io from 'socket.io-client';\r\nimport './DashboardHome.css';\r\n\r\nconst StatCard = ({ title, value, icon, status = 'normal' }) => (\r\n  <div className={`stat-card ${status}`}>\r\n    <div className=\"stat-icon\">{icon}</div>\r\n    <h4>{title}</h4>\r\n    <p><strong>{value}</strong></p>\r\n  </div>\r\n);\r\n\r\nconst DashboardHome = () => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [currentStats, setCurrentStats] = useState({\r\n    humidity: 0,\r\n    temperature: 0,\r\n    waterUsed: 0\r\n  });\r\n\r\n   // Nouveaux états pour l'irrigation\r\n  const [irrigationState, setIrrigationState] = useState('Arrêté');\r\n  const [irrigationDuration, setIrrigationDuration] = useState(0);\r\n  const [irrigationQueue, setIrrigationQueue] = useState([]);\r\n  const [currentIrrigationTimer, setCurrentIrrigationTimer] = useState(null);\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n\r\n  // Fonction pour démarrer une irrigation\r\n  const startIrrigation = (duration) => {\r\n    console.log(\"🚿 Démarrage irrigation pour ${duration} secondes\");\r\n    setIrrigationState('En cours');\r\n    setIrrigationDuration(duration);\r\n    \r\n    // Timer pour compter la durée restante\r\n    const timer = setInterval(() => {\r\n      setIrrigationDuration(prev => {\r\n        if (prev <= 1) {\r\n          // Irrigation terminée\r\n          finishIrrigation();\r\n          return 0;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n    \r\n    setCurrentIrrigationTimer(timer);\r\n  };\r\n\r\n  // Fonction pour terminer une irrigation\r\n  const finishIrrigation = () => {\r\n    console.log('✅ Irrigation terminée');\r\n    setIrrigationState('Arrêté');\r\n    setIrrigationDuration(0);\r\n    \r\n    if (currentIrrigationTimer) {\r\n      clearInterval(currentIrrigationTimer);\r\n      setCurrentIrrigationTimer(null);\r\n    }\r\n    \r\n    // Traiter le prochain ordre dans la file d'attente (kas thahed wa9ila)\r\n    setIrrigationQueue(prev => {\r\n      const newQueue = [...prev];\r\n      const nextOrder = newQueue.shift();\r\n      \r\n      if (nextOrder) {\r\n        console.log(\"📋 Traitement de l'ordre suivant: ${nextOrder} secondes\");\r\n        setTimeout(() => startIrrigation(nextOrder), 500); // Petit délai avant le prochain\r\n      }\r\n      \r\n      return newQueue;\r\n    });\r\n  };\r\n\r\n  // Fonction pour ajouter un ordre d'irrigation (durée en heures)\r\n  const addIrrigationOrder = (durationInHours) => {\r\n    // Convertir les heures en secondes\r\n    const durationInSeconds = Math.floor(durationInHours * 3600);\r\n    \r\n    if (irrigationState === 'Arrêté') {\r\n      // Aucune irrigation en cours, démarrer immédiatement\r\n      startIrrigation(durationInSeconds);\r\n    } else {\r\n      // Irrigation en cours, ajouter à la file d'attente (kas thahed wa9ila)\r\n      console.log(\"📝 Ordre d'irrigation ajouté à la file d'attente: ${durationInHours}h (${durationInSeconds}s)\");\r\n      setIrrigationQueue(prev => [...prev, durationInSeconds]);\r\n    }\r\n  };\r\n\r\n  // Initialize Socket.IO connection\r\n  useEffect(() => {\r\n    const socket = io('http://localhost:3000', {\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n\r\n    // Handle Socket.IO connection\r\n    socket.on('connect', () => {\r\n      console.log('✅ Connected to Socket.IO server');\r\n      setConnectionStatus('connected');\r\n      setError(null);\r\n      setIsLoading(false);\r\n    });\r\n\r\n    // Handle sensor data from server\r\n    socket.on('sensorData', (sensorData) => {\r\n      console.log('Data received from server:', sensorData);\r\n      \r\n      if (sensorData && typeof sensorData === 'object') {\r\n        // Update current stats\r\n        setCurrentStats({\r\n          moisture: sensorData.h_soil_pourcentage != null ? sensorData.h_soil_pourcentage : \"--\", // Match MQTT data field 'h' for humidity\r\n          humidity: sensorData.h_air != null ? sensorData.h_air : \"--\",\r\n          temperature: sensorData.t != null ? sensorData.t : \"--\",\r\n          waterUsed: Math.floor(Math.random() * 300) // Placeholder until real data available\r\n        });\r\n\r\n         // Vérifier s'il y a un ordre d'irrigation dans les données (????XXX)\r\n        if (sensorData.prediction && sensorData.time) {\r\n          console.log(\"🚿 Ordre d'irrigation reçu: ${sensorData.irrigation_duration}h\");\r\n          addIrrigationOrder(sensorData.irrigation_duration); // Durée en heures\r\n        }\r\n\r\n        // Create chart data point\r\n        const now = new Date();\r\n        const timeString = now.toLocaleTimeString().slice(0, 5);\r\n\r\n        const newDataPoint = {\r\n          time: timeString,\r\n          humidity: sensorData.h_air != null ? sensorData.h_air : 0, // Use h_air for chart\r\n          temperature: sensorData.t != null ? sensorData.t : 0,\r\n          water: sensorData.waterUsed != null ? sensorData.waterUsed : Math.floor(Math.random() * 300),\r\n          timestamp: sensorData.ts ? new Date(sensorData.ts * 1000).toISOString() : now.toISOString()\r\n        };\r\n\r\n        // Add to chart data (keep last 10 points)\r\n        setChartData(prevData => {\r\n          const updatedData = [...prevData, newDataPoint];\r\n          return updatedData.slice(-10); // Keep only last 10 points\r\n        });\r\n\r\n        console.log('✅ Data updated successfully');\r\n      } else {\r\n        console.log('⚠️ Invalid data received from server');\r\n        setError('Invalid data received from server');\r\n      }\r\n    });\r\n\r\n    // Handle connection errors\r\n    socket.on('connect_error', (error) => {\r\n      console.error('❌ Socket.IO connection error:', error);\r\n      setConnectionStatus('disconnected');\r\n      setError('Failed to connect to server');\r\n      setIsLoading(false);\r\n\r\n      // Use fallback data if no real data available\r\n      if (chartData.length === 0) {\r\n        const fallbackData = createFallbackData();\r\n        setChartData(fallbackData);\r\n        setCurrentStats({\r\n          humidity: \"--\",\r\n          temperature: \"--\",\r\n          waterUsed: \"--\"\r\n        });\r\n      }\r\n    });\r\n\r\n    // Handle disconnection\r\n    socket.on('disconnect', () => {\r\n      console.log('🔌 Disconnected from Socket.IO server');\r\n      setConnectionStatus('disconnected');\r\n      setError('Server disconnected');\r\n    });\r\n\r\n    // Initial load: check if server is running\r\n    const loadInitialData = async () => {\r\n      setIsLoading(true);\r\n      if (!socket.connected) {\r\n        console.log('⚠️ Server not running, using fallback data');\r\n        setError('Server not running (Start: node server.js)');\r\n        const fallbackData = createFallbackData();\r\n        setChartData(fallbackData);\r\n        setCurrentStats({\r\n          humidity: \"--\",\r\n          temperature: \"--\",\r\n          waterUsed: \"--\"\r\n        });\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadInitialData();\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      socket.disconnect();\r\n      console.log('🧹 Socket.IO connection closed');\r\n    };\r\n  }, []);\r\n\r\n  // Nettoyage du timer lors du démontage du composant\r\n  useEffect(() => {\r\n    return () => {\r\n      if (currentIrrigationTimer) {\r\n        clearInterval(currentIrrigationTimer);\r\n      }\r\n    };\r\n  }, [currentIrrigationTimer]);\r\n\r\n  // Fallback data when server is not available\r\n  const createFallbackData = () => {\r\n    const data = [];\r\n    const now = new Date();\r\n    \r\n    for (let i = 9; i >= 0; i--) {\r\n      const time = new Date(now.getTime() - i * 300000);\r\n      data.push({\r\n        time: time.toLocaleTimeString().slice(0, 5),\r\n        humidity: Math.floor(30 + Math.random() * 50),\r\n        temperature: Math.floor(15 + Math.random() * 15),\r\n        water: Math.floor(Math.random() * 300),\r\n        timestamp: time.toISOString()\r\n      });\r\n    }\r\n    return data;\r\n  };\r\n\r\n  // Get status colors for stat cards\r\n  const getmoisureStatus = () => {\r\n    if (typeof currentStats.moisture === 'number') {\r\n        if (currentStats.moisture < 20) return 'danger';\r\n        if (currentStats.moisture < 30) return 'warning';\r\n        return 'normal';\r\n      }\r\n      return 'normal';\r\n  };\r\n\r\n  // Get status colors for stat cards\r\n  const getHumidityStatus = () => {\r\n    if (typeof currentStats.humidity === 'number') {\r\n      if (currentStats.humidity < 20) return 'danger';\r\n      if (currentStats.humidity < 30) return 'warning';\r\n      return 'normal';\r\n    }\r\n    return 'normal';\r\n  };\r\n\r\n  const getTemperatureStatus = () => {\r\n    if (typeof currentStats.temperature === 'number') {\r\n      if (currentStats.temperature > 35) return 'warning';\r\n      if (currentStats.temperature > 40) return 'danger';\r\n      return 'normal';\r\n    }\r\n    return 'normal';\r\n  };\r\n\r\n  const getIrrigationStatus = () => {\r\n    return irrigationState === 'En cours' ? 'warning' : 'normal';\r\n  };\r\n\r\n  const getDurationStatus = () => {\r\n    return irrigationDuration > 0 ? 'warning' : 'normal';\r\n  };\r\n\r\n  // Formatage de la durée (secondes vers heures:minutes:secondes)\r\n  const formatDuration = (seconds) => {\r\n    if (seconds === 0) return '0s';\r\n    \r\n    const hours = Math.floor(seconds / 3600);\r\n    const minutes = Math.floor((seconds % 3600) / 60);\r\n    const remainingSeconds = seconds % 60;\r\n    \r\n    let result = [];\r\n    \r\n    if (hours > 0) {\r\n      result.push({hours});\r\n    }\r\n    if (minutes > 0) {\r\n      result.push({minutes});\r\n    }\r\n    if (remainingSeconds > 0 || result.length === 0) {\r\n      result.push({remainingSeconds});\r\n    }\r\n    \r\n    return result.join(' ');\r\n  };\r\n\r\n  // Show loading \r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"loading-container\" style={{ padding: '50px', textAlign: 'center' }}>\r\n        <div className=\"loading-spinner\">⏳</div>\r\n        <p>Chargement des données du serveur...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className=\"dashboard-home\">\r\n      {/* Header with connection status */}\r\n      <header className=\"dashboard-header\">\r\n        <h1>Système d'Irrigation Intelligent</h1>\r\n        <div className={`connection-status ${connectionStatus}`}>\r\n          <span className=\"status-dot\">\r\n            {connectionStatus === 'connected' ? '🟢' : '🔴'}\r\n          </span>\r\n          <span className=\"status-text\">\r\n            {connectionStatus === 'connected' ? 'Serveur connecté' : 'Serveur déconnecté'}\r\n          </span>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Error message */}\r\n      {error && (\r\n        <div className=\"error-banner\" style={{ \r\n          background: '#ffebee', \r\n          color: '#c62828', \r\n          padding: '10px', \r\n          borderRadius: '5px', \r\n          margin: '10px 0',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center'\r\n        }}>\r\n          <span>⚠️ {error}</span>\r\n          <button \r\n            onClick={() => window.location.reload()} \r\n            className=\"retry-button\"\r\n            style={{\r\n              background: '#c62828',\r\n              color: 'white',\r\n              border: 'none',\r\n              padding: '5px 10px',\r\n              borderRadius: '3px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Réessayer\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Stats Cards */}\r\n      <section className=\"stats-section\" style={{ \r\n        display: 'grid', \r\n        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', \r\n        gap: '20px', \r\n        margin: '20px 0' \r\n      }}>\r\n        <StatCard \r\n          title=\"Humidité du sol\" \r\n          value={`${currentStats.moisure}%`} \r\n          icon=\"💧\"\r\n          status={getmoisureStatus()}\r\n        />\r\n        <StatCard \r\n          title=\"Température\" \r\n          value={`${currentStats.temperature}°C`} \r\n          icon=\"🌡️\"\r\n          status={getTemperatureStatus()}\r\n        />\r\n        <StatCard \r\n          title=\"Humidité de l'air\" \r\n          value={`${currentStats.humidity}%`} \r\n          icon=\"💧\"\r\n          status={getHumidityStatus()}\r\n        />\r\n        <StatCard \r\n          title=\"Niveau d'Irrigation\" \r\n          value={typeof currentStats.moisture === 'number' && currentStats.moisture < 30 ? 'Faible' : 'Élevé'} \r\n          icon=\"🌱\"\r\n          status=\"normal\"\r\n        />\r\n        <StatCard \r\n          title=\"État d'irrigation\" \r\n          value={irrigationState} \r\n          icon=\"🚿\"\r\n          status={getIrrigationStatus()}\r\n        />\r\n        <StatCard \r\n          title=\"Durée d'irrigation\" \r\n          value={formatDuration(irrigationDuration)} \r\n          icon=\"⏱\"\r\n          status={getDurationStatus()}\r\n        />\r\n      </section>\r\n\r\n      {/* Affichage de la file d'attente si elle n'est pas vide */}\r\n      {irrigationQueue.length > 0 && (\r\n        <div className=\"irrigation-queue\" style={{\r\n          background: '#fff3cd',\r\n          color: '#856404',\r\n          padding: '10px',\r\n          borderRadius: '5px',\r\n          margin: '10px 0',\r\n          border: '1px solid #ffeaa7'\r\n        }}>\r\n          <strong>📋 File d'attente d'irrigation:</strong> {irrigationQueue.length} ordre(s) en attente\r\n          <div style={{ fontSize: '0.9em', marginTop: '5px' }}>\r\n            Prochains: {irrigationQueue.slice(0, 3).map(durationInSeconds => formatDuration(durationInSeconds)).join(', ')}\r\n            {irrigationQueue.length > 3 && '...'}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Charts */}\r\n      {chartData.length > 0 && (\r\n        <>\r\n          <section className=\"chart-section\" style={{ margin: '30px 0' }}>\r\n            <h2>Évolution de l'humidité et température</h2>\r\n            <div className=\"chart-container\" style={{ height: '300px', margin: '20px 0' }}>\r\n              <ResponsiveContainer width=\"100%\" height={300}>\r\n                <LineChart data={chartData}>\r\n                  <CartesianGrid stroke=\"#eee\" strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"time\" />\r\n                  <YAxis yAxisId=\"left\" orientation=\"left\" stroke=\"#1a562f\" />\r\n                  <YAxis yAxisId=\"right\" orientation=\"right\" stroke=\"#8884d8\" />\r\n                  <Tooltip />\r\n                  <Line \r\n                    yAxisId=\"left\" \r\n                    type=\"monotone\" \r\n                    dataKey=\"humidity\" \r\n                    stroke=\"#1a562f\" \r\n                    strokeWidth={2}\r\n                    name=\"Humidité (%)\"\r\n                  />\r\n                  <Line \r\n                    yAxisId=\"right\" \r\n                    type=\"monotone\" \r\n                    dataKey=\"temperature\" \r\n                    stroke=\"#8884d8\" \r\n                    strokeWidth={2}\r\n                    name=\"Température (°C)\"\r\n                  />\r\n                </LineChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </section>\r\n        </>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default DashboardHome;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}